apiVersion: apps/v1beta1
kind: StatefulSet
metadata:
  name: "{{ template "vault.fullname" . }}-{{.Values.Consul.ComponentName}}"
  labels:
    heritage: {{ .Release.Service | quote }}
    release: {{ .Release.Name | quote }}
    chart: {{ template "vault.chart" . }}
    component: "{{ .Release.Name }}-{{ .Values.Consul.ComponentName }}"
spec:
  serviceName: "{{ template "vault.fullname" . }}-{{.Values.Consul.ComponentName}}"
  podManagementPolicy: Parallel
  updateStrategy:
  {{- if (gt (int .Values.Consul.updatePartition) 0) }}
    type: RollingUpdate
    rollingUpdate:
      partition: {{ .Values.Consul.updatePartition }}
  {{- else -}}
    type: "OnDelete"
  {{- end }}
  replicas: {{ .Values.Consul.Replicas }}
  selector:
    matchLabels:
      release: {{ .Release.Name | quote }}
      component: "{{ .Release.Name }}-{{ .Values.Consul.ComponentName }}"
  template:
    metadata:
      name: "{{ template "vault.fullname" . }}-{{.Values.Consul.ComponentName}}"
      labels:
        heritage: {{ .Release.Service | quote }}
        release: {{ .Release.Name | quote }}
        chart: {{ template "vault.chart" . }}
        component: "{{ .Release.Name }}-{{ .Values.Consul.ComponentName }}"
    spec:
      podAntiAffinity:
        requiredDuringSchedulingIgnoredDuringExecution:
          - labelSelector:
              matchLabels:
                release: {{ .Release.Name | quote }}
                component: "{{ .Release.Name }}-{{ .Values.Consul.ComponentName }}"
            topologyKey: kubernetes.io/hostname
      terminationGracePeriodSeconds: 10
      securityContext:
        fsGroup: 1000
      containers:
      - name: "{{ template "vault.fullname" . }}-{{.Values.Consul.ComponentName}}"
        image: "{{.Values.Consul.Image}}:{{.Values.Consul.ImageTag}}"
        imagePullPolicy: "{{.Values.Consul.ImagePullPolicy}}"
        ports:
        - name: http
          containerPort: {{.Values.Consul.HttpPort}}
        - name: serflan-tcp
          protocol: "TCP"
          containerPort: {{.Values.Consul.SerflanPort}}
        - name: serflan-udp
          protocol: "UDP"
          containerPort: {{.Values.Consul.SerflanUdpPort}}
        - name: serfwan-tcp
          protocol: "TCP"
          containerPort: {{.Values.Consul.SerfwanPort}}
        - name: serfwan-udp
          protocol: "UDP"
          containerPort: {{.Values.Consul.SerfwanUdpPort}}
        - name: server
          containerPort: {{.Values.Consul.ServerPort}}
        - name: consuldns
          containerPort: {{.Values.Consul.ConsulDnsPort}}
        resources:
          requests:
            cpu: "{{.Values.Consul.Cpu}}"
            memory: "{{.Values.Consul.Memory}}"
        env:
        - name: INITIAL_CLUSTER_SIZE
          value: {{ .Values.Consul.Replicas | quote }}
        - name: STATEFULSET_NAME
          value: "{{ template "vault.fullname" . }}-{{.Values.Consul.ComponentName}}"
        - name: POD_IP
          valueFrom:
            fieldRef:
              fieldPath: status.podIP
        - name: STATEFULSET_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        volumeMounts:
        - name: config
          mountPath: /consul/config-ro
        - name: gossip-json
          mountPath: /consul/secrets
          readOnly: true
        - name: tls
          mountPath: /consul/tls
          readOnly: true
        - name: ca
          mountPath: /consul/ca
          readOnly: true
        livenessProbe:
          exec:
            command:
            - consul
            - members
            - "-ca-file=/consul/ca/ca.crt.pem"
            - "-client-cert=/consul/tls/tls.crt"
            - "-client-key=/consul/tls/tls.key"
            - "-http-addr=https://127.0.0.1:{{.Values.Consul.HttpPort}}"
            - "-tls-server-name={{ template "vault.fullname" . }}-{{.Values.Consul.ComponentName}}"
          initialDelaySeconds: 300
          timeoutSeconds: 5
        command:
          - "/bin/sh"
          - "-ec"
          - |
            cp /consul/config-ro/config.json /consul/config/config.json
            IP=$(hostname -i)

            for i in $(seq 0 $((${INITIAL_CLUSTER_SIZE} - 1))); do
                while true; do
                    echo "Waiting for ${STATEFULSET_NAME}-${i}.${STATEFULSET_NAME} to come up"
                    ping -W 1 -c 1 ${STATEFULSET_NAME}-${i}.${STATEFULSET_NAME}.${STATEFULSET_NAMESPACE}.svc.cluster.local > /dev/null && break
                    sleep 1s
                done
            done

            PEERS=""
            for i in $(seq 0 $((${INITIAL_CLUSTER_SIZE} - 1))); do
                PEERS="${PEERS}${PEERS:+ } -retry-join $(ping -c 1 ${STATEFULSET_NAME}-${i}.${STATEFULSET_NAME}.${STATEFULSET_NAMESPACE}.svc.cluster.local | awk -F'[()]' '/PING/{print $2}')"
            done

            docker-entrypoint.sh \
              consul \
              agent \
              -config-dir=/consul/config \
              -config-dir=/consul/secrets \
              -bootstrap-expect=${INITIAL_CLUSTER_SIZE} \
              -advertise=${IP} \
              ${PEERS}
      volumes:
      - name: config
        configMap:
          name: "{{ template "vault.fullname" . }}-{{.Values.Consul.ComponentName}}"
          items:
          - key: config.json
            path: config.json
      - name: gossip-json
        secret:
          secretName: {{ template "vault.fullname" . }}-consul-gossip-json
      - name: tls
        secret:
          secretName: {{ template "vault.fullname" . }}-consul.tls
      - name: ca
        secret:
          secretName: {{ template "vault.fullname" . }}-consul.ca
